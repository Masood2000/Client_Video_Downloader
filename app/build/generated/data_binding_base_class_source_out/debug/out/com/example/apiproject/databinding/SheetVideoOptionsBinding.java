// Generated by view binder compiler. Do not edit!
package com.example.apiproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.apiproject.R;
import com.google.android.material.divider.MaterialDivider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SheetVideoOptionsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView actionCopy;

  @NonNull
  public final TextView actionDelete;

  @NonNull
  public final TextView actionPlay;

  @NonNull
  public final TextView actionRename;

  @NonNull
  public final TextView actionShare;

  @NonNull
  public final TextView actionWebsite;

  @NonNull
  public final MaterialDivider mdDelete;

  @NonNull
  public final MaterialDivider mdDownload;

  @NonNull
  public final MaterialDivider mdRename;

  @NonNull
  public final MaterialDivider mdShare;

  @NonNull
  public final ImageView sheetSlider;

  private SheetVideoOptionsBinding(@NonNull LinearLayout rootView, @NonNull TextView actionCopy,
      @NonNull TextView actionDelete, @NonNull TextView actionPlay, @NonNull TextView actionRename,
      @NonNull TextView actionShare, @NonNull TextView actionWebsite,
      @NonNull MaterialDivider mdDelete, @NonNull MaterialDivider mdDownload,
      @NonNull MaterialDivider mdRename, @NonNull MaterialDivider mdShare,
      @NonNull ImageView sheetSlider) {
    this.rootView = rootView;
    this.actionCopy = actionCopy;
    this.actionDelete = actionDelete;
    this.actionPlay = actionPlay;
    this.actionRename = actionRename;
    this.actionShare = actionShare;
    this.actionWebsite = actionWebsite;
    this.mdDelete = mdDelete;
    this.mdDownload = mdDownload;
    this.mdRename = mdRename;
    this.mdShare = mdShare;
    this.sheetSlider = sheetSlider;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SheetVideoOptionsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SheetVideoOptionsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.sheet_video_options, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SheetVideoOptionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_copy;
      TextView actionCopy = ViewBindings.findChildViewById(rootView, id);
      if (actionCopy == null) {
        break missingId;
      }

      id = R.id.action_delete;
      TextView actionDelete = ViewBindings.findChildViewById(rootView, id);
      if (actionDelete == null) {
        break missingId;
      }

      id = R.id.action_play;
      TextView actionPlay = ViewBindings.findChildViewById(rootView, id);
      if (actionPlay == null) {
        break missingId;
      }

      id = R.id.action_rename;
      TextView actionRename = ViewBindings.findChildViewById(rootView, id);
      if (actionRename == null) {
        break missingId;
      }

      id = R.id.action_share;
      TextView actionShare = ViewBindings.findChildViewById(rootView, id);
      if (actionShare == null) {
        break missingId;
      }

      id = R.id.action_website;
      TextView actionWebsite = ViewBindings.findChildViewById(rootView, id);
      if (actionWebsite == null) {
        break missingId;
      }

      id = R.id.md_delete;
      MaterialDivider mdDelete = ViewBindings.findChildViewById(rootView, id);
      if (mdDelete == null) {
        break missingId;
      }

      id = R.id.md_download;
      MaterialDivider mdDownload = ViewBindings.findChildViewById(rootView, id);
      if (mdDownload == null) {
        break missingId;
      }

      id = R.id.md_rename;
      MaterialDivider mdRename = ViewBindings.findChildViewById(rootView, id);
      if (mdRename == null) {
        break missingId;
      }

      id = R.id.md_share;
      MaterialDivider mdShare = ViewBindings.findChildViewById(rootView, id);
      if (mdShare == null) {
        break missingId;
      }

      id = R.id.sheet_slider;
      ImageView sheetSlider = ViewBindings.findChildViewById(rootView, id);
      if (sheetSlider == null) {
        break missingId;
      }

      return new SheetVideoOptionsBinding((LinearLayout) rootView, actionCopy, actionDelete,
          actionPlay, actionRename, actionShare, actionWebsite, mdDelete, mdDownload, mdRename,
          mdShare, sheetSlider);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
