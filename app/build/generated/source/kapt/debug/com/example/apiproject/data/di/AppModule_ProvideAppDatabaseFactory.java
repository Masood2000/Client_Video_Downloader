// Generated by Dagger (https://dagger.dev).
package com.example.apiproject.data.di;

import android.content.Context;
import com.example.apiproject.domain.db.AppDb;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideAppDatabaseFactory implements Factory<AppDb> {
  private final Provider<Context> appContextProvider;

  public AppModule_ProvideAppDatabaseFactory(Provider<Context> appContextProvider) {
    this.appContextProvider = appContextProvider;
  }

  @Override
  public AppDb get() {
    return provideAppDatabase(appContextProvider.get());
  }

  public static AppModule_ProvideAppDatabaseFactory create(Provider<Context> appContextProvider) {
    return new AppModule_ProvideAppDatabaseFactory(appContextProvider);
  }

  public static AppDb provideAppDatabase(Context appContext) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideAppDatabase(appContext));
  }
}
